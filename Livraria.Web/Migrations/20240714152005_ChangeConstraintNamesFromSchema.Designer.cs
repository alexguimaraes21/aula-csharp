// <auto-generated />
using System;
using Livraria.Web.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Livraria.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240714152005_ChangeConstraintNamesFromSchema")]
    partial class ChangeConstraintNamesFromSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Livraria.Web.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tb_author", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<int>("Isbn")
                        .HasColumnType("int")
                        .HasColumnName("isbn");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("publisher");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("DATE")
                        .HasColumnName("release_date");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("summary");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int")
                        .HasColumnName("total_pages");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("tb_book", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("tb_genre", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sale_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("SaleTotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("sale_total");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("tb_sale", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.SaleBook", b =>
                {
                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_id");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.HasKey("SaleId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("tb_sale_book", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Seller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seller_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("SellerCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("seller_code");

                    b.HasKey("Id");

                    b.ToTable("tb_seller", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("stock_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<double>("Qty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("qty");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("tb_stock", (string)null);
                });

            modelBuilder.Entity("Livraria.Web.Models.Book", b =>
                {
                    b.HasOne("Livraria.Web.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_author_id");

                    b.HasOne("Livraria.Web.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_genre_id");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Livraria.Web.Models.Sale", b =>
                {
                    b.HasOne("Livraria.Web.Models.Seller", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_seller_id");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Livraria.Web.Models.SaleBook", b =>
                {
                    b.HasOne("Livraria.Web.Models.Book", "Book")
                        .WithMany("SaleBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sablebook_book_id");

                    b.HasOne("Livraria.Web.Models.Sale", "Sale")
                        .WithMany("SaleBooks")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sablebook_sale_id");

                    b.Navigation("Book");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Livraria.Web.Models.Stock", b =>
                {
                    b.HasOne("Livraria.Web.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Livraria.Web.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Livraria.Web.Models.Book", b =>
                {
                    b.Navigation("SaleBooks");
                });

            modelBuilder.Entity("Livraria.Web.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Livraria.Web.Models.Sale", b =>
                {
                    b.Navigation("SaleBooks");
                });

            modelBuilder.Entity("Livraria.Web.Models.Seller", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
